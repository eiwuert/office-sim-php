<?php

namespace App\Services;

//use Freshjones\Core\Helpers\SimulationHelpers;
use \FreshJones\Office\Services\Simulations\ServiceSimulatorInterface;

interface QueueProcessorInterface {

 
}

/*
	The queue processors job is to prepare a simulations outputs for the queue
	it turns them into process objects and enters them into the queue
*/
class QueueProcessor implements QueueProcessorInterface
{

	private $simulator;
	private $logger;
	private $helpers;
	private $service;
	private $timer;

    public function __construct()
    {
    	
    }

    /*
    private function getProcessor($output)
    {

        $config = array();

        if($this->simulator->getConfigValue('finishdelays'))
        {
            $config = $this->simulator->getConfigValue('finishdelays');
        }

        $queueprocess = new QueueProcess
            (
                $this->service->get('department'),
                $this->service->get('name'),
                $output,
                $config
            );

        return $queueprocess;

    }
    */

    private function getStartDelays()
    {
    	
    	$delays = 0;

    	$startDelayConfig = $this->simulator->getConfigValue('startdelays');

    	if(!$startDelayConfig)
    		return $delays;

    	//see if we are going to delay
    	$probability = $this->helpers->getRandomProbability($startDelayConfig['probability']['value']);

    	if(!$probability)
    		return $delays;

    	//determine the cost
    	$cost = $this->helpers->getRandomMinMaxValue($startDelayConfig['cost']);

    	//determine the reason
    	$reason = $this->helpers->getRandomValue($startDelayConfig['reason']);

    	//log the reason
    	$this->logger->addRecord(
    		$this->service->get('department'),
    		$this->service->get('name'), 
    		'Start Delay: ' . $reason, 
    		$cost
    	);

    	//return the cost
    	return $cost;

    }

    private function getProcessMonth()
    {

    	$currentMonth = $this->timer->getCurrentValue('month');

    	$processTime = $this->simulator->getConfigValue('processtime');
    	$processTime = $this->helpers->getRandomMinMaxValue($processTime);

    	$processTime += $this->getStartDelays();

    	$month = $processTime < 720 ? $currentMonth : $currentMonth + floor($processTime / 720);
		if($month > 12) $month = 1;

    	return $month;

    }

    public function process(ServiceSimulatorInterface $simulator)
    {

    	$this->simulator = $simulator;

    	$outputCount = $simulator->getOutputCount();

    	if(!$outputCount)
    		return;

    	$simulation        = $simulator->getSimulation();
    	$this->timer       = $simulation->getTimer();
    	$this->logger      = $simulation->getLogger();
    	$this->helpers     = $simulator->getHelpers();
    	$queue             = $simulation->getQueue();
    	$this->service     = $simulator->getService();
    	
		$serviceOutputs   = $this->service->get('outputs');
		
		for($i=0; $i<$outputCount; $i++)
		{

			foreach($serviceOutputs->getOutputs() AS $key => $output)
			{
				
				$processMonth = $this->getProcessMonth(); 

				//$processor = $this->getProcessor($output);

				$queue->register($processMonth, $this);

			}

		}

    }
    
}